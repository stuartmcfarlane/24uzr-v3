generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String? @db.VarChar(256)
  password String  @db.VarChar(256)
  salt     String
  isAdmin  Boolean @default(false)
  Ships    Ship[]
  Routes   Route[]
  Plan     Plan[]
}

model Ship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(128)
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
}

model Map {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isLocked  Boolean  @default(false)
  name      String   @db.VarChar(128)
  Buoys     Buoy[]
  Legs      Leg[]
  Routes    Route[]
  Plan      Plan[]
}

model Buoy {
  id          Int     @id @default(autoincrement())
  name        String  @db.VarChar(128)
  lat         Decimal @db.Decimal(10, 8)
  lng         Decimal @db.Decimal(11, 8)
  map         Map     @relation(fields: [mapId], references: [id])
  mapId       Int
  legsOut     Leg[]   @relation("startBuoy")
  legsIn      Leg[]   @relation("endBuoy")
  routeStarts Route[] @relation("startBuoy")
  routeEnds   Route[] @relation("endBuoy")
  planStarts  Plan[]  @relation("startBuoy")
  planEnds    Plan[]  @relation("endBuoy")
}

model Leg {
  id          Int           @id @default(autoincrement())
  map         Map           @relation(fields: [mapId], references: [id])
  mapId       Int
  startBuoy   Buoy          @relation(name: "startBuoy", fields: [startBuoyId], references: [id])
  startBuoyId Int
  endBuoy     Buoy          @relation(name: "endBuoy", fields: [endBuoyId], references: [id])
  endBuoyId   Int
  LegsOnRoute LegsOnRoute[]
}

enum Status {
  PENDING
  FAILED
  DONE
}

enum RouteType {
  USER
  SHORTEST
  GENERATED
}

model Route {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  type        RouteType
  status      Status        @default(PENDING)
  owner       User          @relation(fields: [ownerId], references: [id])
  name        String        @db.VarChar(128)
  map         Map           @relation(fields: [mapId], references: [id])
  mapId       Int
  startBuoy   Buoy          @relation(name: "startBuoy", fields: [startBuoyId], references: [id])
  startBuoyId Int
  endBuoy     Buoy          @relation(name: "endBuoy", fields: [endBuoyId], references: [id])
  endBuoyId   Int
  legs        LegsOnRoute[]
  ownerId     Int
  plan        Plan          @relation(fields: [planId], references: [id])
  planId      Int
}

model LegsOnRoute {
  route   Route @relation(fields: [routeId], references: [id])
  routeId Int
  legId   Int
  leg     Leg   @relation(fields: [legId], references: [id])
  index   Int

  @@id([routeId, legId])
}

model Plan {
  id                   Int      @id @default(autoincrement())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  name                 String   @db.VarChar(128)
  ownerId              Int
  owner                User     @relation(fields: [ownerId], references: [id])
  mapId                Int
  map                  Map      @relation(fields: [mapId], references: [id])
  routes               Route[]
  startBuoy            Buoy     @relation(name: "startBuoy", fields: [startBuoyId], references: [id])
  startBuoyId          Int
  endBuoy              Buoy     @relation(name: "endBuoy", fields: [endBuoyId], references: [id])
  endBuoyId            Int
  raceSecondsRemaining Int
}
