generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator zod {
  provider = "zod-prisma-types"
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  name     String? @db.VarChar(256)
  password String  @db.VarChar(256)
  salt     String
  isAdmin  Boolean @default(false)
  Ships    Ship[]
  Routes   Route[]
}

model Ship {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(128)
  owner     User     @relation(fields: [ownerId], references: [id])
  ownerId   Int
}

model Map {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isLocked  Boolean  @default(false)
  name      String   @db.VarChar(128)
  Buoys     Buoy[]
  Legs      Leg[]
  Routes    Route[]
}

model Buoy {
  id    Int     @id @default(autoincrement())
  name  String  @db.VarChar(128)
  lat   Decimal @db.Decimal(10, 8)
  lng   Decimal @db.Decimal(11, 8)
  map   Map     @relation(fields: [mapId], references: [id])
  mapId Int
}

model Leg {
  id          Int @id @default(autoincrement())
  map         Map @relation(fields: [mapId], references: [id])
  mapId       Int
  startBuoyId Int
  endBuoyId   Int
}

model Route {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  owner       User          @relation(fields: [ownerId], references: [id])
  name        String        @db.VarChar(128)
  map         Map           @relation(fields: [mapId], references: [id])
  mapId       Int
  startBuoyId Int
  endBuoyId   Int
  legs        LegsOnRoute[]
  ownerId     Int
}

model LegsOnRoute {
  route   Route @relation(fields: [routeId], references: [id])
  routeId Int
  legId   Int
  index   Int

  @@id([routeId, legId])
}
